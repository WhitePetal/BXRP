// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel HizGenerator

Texture2D<float4> _EncodeDepthBuffer;
RWTexture2D<float> _HizMap;

groupshared float groupshadredDepths[8 * 8];

inline float DecodeFloatRGBA( float4 enc )
{
    float4 kDecodeDot = float4(1.0, 1.0/255.0, 1.0/65025.0, 1.0/16581375.0);
    return dot( enc, kDecodeDot );
}

[numthreads(8,8,1)]
void HizGenerator(uint3 id : SV_DispatchThreadID, uint groupIndex : SV_GROUPINDEX, uint3 groupId : SV_GROUPID, uint3 groupThreadID : SV_GroupThreadID)
{
    // >> 1
    if((groupThreadID.x % 2) == 0 && (groupThreadID.y % 2) == 0)
    {
        float4 encodeDepth0 = _EncodeDepthBuffer[id.xy];
        float4 encodeDepth1 = _EncodeDepthBuffer[id.xy + uint2(1, 0)];
        float4 encodeDepth2 = _EncodeDepthBuffer[id.xy + uint2(0, 1)];
        float4 encodeDepth3 = _EncodeDepthBuffer[id.xy + uint2(1, 1)];
        float depth0 = DecodeFloatRGBA(encodeDepth0);
        float depth1 = DecodeFloatRGBA(encodeDepth1);
        float depth2 = DecodeFloatRGBA(encodeDepth2);
        float depth3 = DecodeFloatRGBA(encodeDepth3);
        groupshadredDepths[groupIndex] = min(depth0, min(depth1, min(depth2, depth3)));
    }
    GroupMemoryBarrierWithGroupSync();
    // >> 2
    if((groupThreadID.x % 4) == 0 && (groupThreadID.y % 4) == 0)
    {
        float depth0 = groupshadredDepths[groupIndex];
        float depth1 = groupshadredDepths[groupIndex + 2];
        float depth2 = groupshadredDepths[groupIndex + 16];
        float depth3 = groupshadredDepths[groupIndex + 16 + 2];
        groupshadredDepths[groupIndex] = min(depth0, min(depth1, min(depth2, depth3)));
    }
    GroupMemoryBarrierWithGroupSync();
    // >> 3 is real store
    if((groupThreadID.x % 8) == 0 && (groupThreadID.y % 8) == 0)
    {
        float depth0 = groupshadredDepths[groupIndex];
        float depth1 = groupshadredDepths[groupIndex + 4];
        float depth2 = groupshadredDepths[groupIndex + 32];
        float depth3 = groupshadredDepths[groupIndex + 32 + 4];
        _HizMap[groupId.xy] = min(depth0, min(depth1, min(depth2, depth3)));
    }
}

#pragma kernel HizMipGenerator

float4 _MipOffset;

[numthreads(8,8,1)]
void HizMipGenerator(uint3 id : SV_DispatchThreadID, uint groupIndex : SV_GROUPINDEX, uint3 groupId : SV_GROUPID, uint3 groupThreadID : SV_GroupThreadID)
{
    uint2 pos = id.xy + _MipOffset.xy;
    float2 mipSize = _MipOffset.zw;
    float2 offset = _MipOffset.xy + float2(mipSize.x, 0.0);
    // >> 1
    if((groupThreadID.x % 2) == 0 && (groupThreadID.y % 2) == 0)
    {
        float depth0 = _HizMap[pos];
        float depth1 = _HizMap[pos + uint2(1, 0)];
        float depth2 = _HizMap[pos + uint2(0, 1)];
        float depth3 = _HizMap[pos + uint2(1, 1)];
        float minDepth = min(depth0, min(depth1, min(depth2, depth3)));
        groupshadredDepths[groupIndex] = minDepth;
        _HizMap[id.xy / 2 + ceil(offset)] = minDepth;
    }
    GroupMemoryBarrierWithGroupSync();
    mipSize *= 0.5;
    if(any(mipSize <= 1)) return;
    offset += float2(0, mipSize.y);
    // >> 2
    if((groupThreadID.x % 4) == 0 && (groupThreadID.y % 4) == 0)
    {
        float depth0 = groupshadredDepths[groupIndex];
        float depth1 = groupshadredDepths[groupIndex + 2];
        float depth2 = groupshadredDepths[groupIndex + 16];
        float depth3 = groupshadredDepths[groupIndex + 16 + 2];
        float minDepth = min(depth0, min(depth1, min(depth2, depth3)));
        groupshadredDepths[groupIndex] = minDepth;
        _HizMap[id.xy / 4 + ceil(offset)] = minDepth;
    }
    GroupMemoryBarrierWithGroupSync();
    mipSize *= 0.5;
    if(any(mipSize <= 1)) return;
    offset += float2(mipSize.x, 0);
    // >> 3 is real store
    if((groupThreadID.x % 8) == 0 && (groupThreadID.y % 8) == 0)
    {
        float depth0 = groupshadredDepths[groupIndex];
        float depth1 = groupshadredDepths[groupIndex + 4];
        float depth2 = groupshadredDepths[groupIndex + 32];
        float depth3 = groupshadredDepths[groupIndex + 32 + 4];
        _HizMap[groupId.xy + ceil(offset)] = min(depth0, min(depth1, min(depth2, depth3)));
    }
}


#pragma kernel HizCulling

Texture2D<float4> _BoundCentersTex;
Texture2D<float4> _BoundSizesTex;
Texture2D<float> _HizMapInput;
int4 _HizParams;
int2 _HizTexSize;
float4 _HizMipSize[16];
float4x4 _HizProjectionMatrix;
RWTexture2D<float> _HizResultRT;


inline float3 GetNDCPos(float3 pos)
{
    float4 p = mul(_HizProjectionMatrix, float4(pos, 1.0));
    p.xyz /= p.w;
    p.xy = p.xy * 0.5 + 0.5;
    // p.y = 1.0f - p.y;
    return p.xyz;
}

[numthreads(8,8,1)]
void HizCulling(uint3 id : SV_DispatchThreadID, uint groupIndex : SV_GROUPINDEX, uint3 groupId : SV_GROUPID, uint3 groupThreadID : SV_GroupThreadID)
{
    float3 size = _BoundSizesTex[id.xy].xyz;
    // if(all(size <= 0.0))
    if(id.x + id.y * 64 > (uint)_HizParams.w) 
    {
        _HizResultRT[id.xy] = 0.0;
        return;
    }
    float3 center = _BoundCentersTex[id.xy].xyz;

    float3 p0 = center + size;
    float3 p1 = center - size;
    float3 p2 = float3(p0.xy, p1.z);     // + + -
    float3 p3 = float3(p0.x, p1.yz);     // + - -
    float3 p4 = float3(p1.xy, p0.z);     // - - +
    float3 p5 = float3(p1.x, p0.y, p1.z);// - + -
    float3 p6 = float3(p0.x, p1.y, p0.z);// + - +
    float3 p7 = float3(p1.x, p0.yz);     // - + +

    p0 = GetNDCPos(p0);
    p1 = GetNDCPos(p1);
    p2 = GetNDCPos(p2);
    p3 = GetNDCPos(p3);
    p4 = GetNDCPos(p4);
    p5 = GetNDCPos(p5);
    p6 = GetNDCPos(p6);
    p7 = GetNDCPos(p7);

    float3 aabbMin = min(p0, min(p1, min(p2, min(p3, min(p4, min(p5, min(p6, p7))))))).xyz;
    float3 aabbMax = max(p0, max(p1, max(p2, max(p3, max(p4, max(p5, max(p6, p7))))))).xyz;

    float2 ndcSize = (aabbMax.xy - aabbMin.xy) * _HizParams.xy;
    float radius = max(ndcSize.x, ndcSize.y);
    int mip = (int)floor(log2(radius));
    // or not mip - 2 for more safe culling
    mip = clamp(mip-2, 0, _HizParams.z);
    float4 mipSize = _HizMipSize[mip];
    int2 minPx = clamp(ceil(aabbMin.xy * mipSize.zw + mipSize.xy), 0, _HizTexSize);
    int2 maxPx = clamp(ceil(aabbMax.xy * mipSize.zw + mipSize.xy), 0, _HizTexSize);

    float d0 = _HizMapInput[minPx];
    float d1 = _HizMapInput[maxPx];
    float d2 = _HizMapInput[int2(minPx.x, maxPx.y)];
    float d3 = _HizMapInput[int2(maxPx.x, minPx.y)];
    float minD = min(d0, min(d1, min(d2, d3)));
    if (minD > aabbMax.z)
    {
        _HizResultRT[id.xy] = 0.0;
    }
    else
    {
        _HizResultRT[id.xy] = 1.0;
    }
}